{"version":3,"sources":["serviceWorker.js","Calculator.js","index.js"],"names":["Boolean","window","location","hostname","match","Calculator","state","screenShow","buttonPressHandler","val","setState","String","handleOperate","arr","split","lastLtr","length","pointPressHandler","indexOf","clearInput","handleEqual","evaluate","className","type","value","this","disabled","onClick","e","target","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f8b34c7c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { Component } from 'react';\nimport { evaluate, string } from 'mathjs';\nimport './Calculator.css';\n\nimport NumBtn from './components/NumBtn';\nexport default class Calculator extends Component {\n  state = {\n    screenShow: '0',\n  };\n\n  buttonPressHandler = (val) => {\n    this.setState({\n      screenShow:\n        this.state.screenShow === '0'\n          ? String(val)\n          : this.state.screenShow + val,\n    });\n  };\n\n  handleOperate = (val) => {\n    let arr = this.state.screenShow.split('');\n    let lastLtr = arr[arr.length - 1];\n    if (\n      lastLtr !== '+' &&\n      lastLtr !== '-' &&\n      lastLtr !== '*' &&\n      lastLtr !== '/'\n    ) {\n      this.setState({\n        screenShow:\n          this.state.screenShow === '0'\n            ? String(val)\n            : this.state.screenShow + val,\n      });\n    } else {\n      return;\n    }\n  };\n\n  pointPressHandler = (val) => {\n    let arr = this.state.screenShow.split('');\n    let lastLtr = arr[arr.length - 1];\n    if (lastLtr !== '.' && arr.indexOf('.') === -1) {\n      this.setState({\n        screenShow: this.state.screenShow + val,\n      });\n    } else {\n      return;\n    }\n  };\n\n  clearInput = () => {\n    this.setState({\n      screenShow: '0',\n    });\n  };\n\n  handleEqual = () => {\n    this.setState({\n      // screenShow: parseFloat(evaluate(this.state.screenShow)).toFixed(4),\n      screenShow: evaluate(this.state.screenShow),\n    });\n  };\n\n  render() {\n    return (\n      <div className='calculator'>\n        <input\n          type='text'\n          className='calculator-screen'\n          value={this.state.screenShow}\n          disabled\n        />\n\n        {/*//////////////// cpm//////////////////////////////////// */}\n        {/* <NumBtn\n          value='12'\n          onClick={(e) => this.buttonPressHandler(e.target.value)}\n        /> */}\n\n        <div className='calculator-keys'>\n          <button\n            type='button'\n            className='operator'\n            value='+'\n            onClick={(e) => this.handleOperate(e.target.value)}\n          >\n            +\n          </button>\n          <button\n            type='button'\n            value='7'\n            onClick={(e) => this.buttonPressHandler(e.target.value)}\n          >\n            7\n          </button>\n          <button\n            type='button'\n            value='8'\n            onClick={(e) => this.buttonPressHandler(e.target.value)}\n          >\n            8\n          </button>\n          <button\n            type='button'\n            value='9'\n            onClick={(e) => this.buttonPressHandler(e.target.value)}\n          >\n            9\n          </button>\n          <button\n            type='button'\n            className='operator'\n            value='-'\n            onClick={(e) => this.handleOperate(e.target.value)}\n          >\n            -\n          </button>\n          <button\n            type='button'\n            value='4'\n            onClick={(e) => this.buttonPressHandler(e.target.value)}\n          >\n            4\n          </button>\n          <button\n            type='button'\n            value='5'\n            onClick={(e) => this.buttonPressHandler(e.target.value)}\n          >\n            5\n          </button>\n          <button\n            type='button'\n            value='6'\n            onClick={(e) => this.buttonPressHandler(e.target.value)}\n          >\n            6\n          </button>\n          <button\n            type='button'\n            className='operator'\n            value='*'\n            onClick={(e) => this.handleOperate(e.target.value)}\n          >\n            &times;\n          </button>\n          <button\n            type='button'\n            value='1'\n            onClick={(e) => this.buttonPressHandler(e.target.value)}\n          >\n            1\n          </button>\n          <button\n            type='button'\n            value='2'\n            onClick={(e) => this.buttonPressHandler(e.target.value)}\n          >\n            2\n          </button>\n          <button\n            type='button'\n            value='3'\n            onClick={(e) => this.buttonPressHandler(e.target.value)}\n          >\n            3\n          </button>\n          <button\n            type='button'\n            className='operator'\n            value='/'\n            onClick={(e) => this.handleOperate(e.target.value)}\n          >\n            &divide;\n          </button>\n\n          <button\n            type='button'\n            value='0'\n            onClick={(e) => this.buttonPressHandler(e.target.value)}\n          >\n            0\n          </button>\n          <button\n            type='button'\n            className='decimal'\n            value='.'\n            onClick={(e) => this.pointPressHandler(e.target.value)}\n          >\n            .\n          </button>\n          <button\n            type='button'\n            className='all-clear'\n            value='all-clear'\n            onClick={this.clearInput}\n          >\n            CLEAR\n          </button>\n\n          <button\n            type='button'\n            className='equal-sign'\n            value='='\n            onClick={this.handleEqual}\n          >\n            =\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Calculator from './Calculator';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}